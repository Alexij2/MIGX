{
    "docs": [
        {
            "location": "/", 
            "text": "MIGX\n\n\nMulti-Items-Grid for MODX-Revolution.\n\n\nWhat is MIGX\n\n\nMIGX is a \ncustom\n \nTemplate Variable\n (TV) input type for aggregating multiple TVs into one TV. This aggregation greatly simplifies the workflow for end users of the manager to add complex data items to the manager. A data item can consist of any number of any other TVs, including text, images, files, checkboxes, etc.\n\n\nThe package is highly customizable and allows the developer to define a custom input window for the MIGX TV. From this input window, items can be added, modified, and reordered.\n\n\nThe package also ships with a snippet (\ngetImageList\n) that facilitates the easy retrieval of the complex data items from the custom MIGX TV input type.\n\n\nMIGXdb\n\n\nWhile MIGX stores its items all in one field as a json-string, MIGXdb handles records of custom-tables.\nWith a MIGXdb-TV, you can handle resource-related-records of a custom-table or even child-resources of the currently edited resource.\n\n\nIts also very easy to create CMPs (Custom Manager Pages) to manage your custom-tables with help of MIGXdb.\n\n\nThere is also a snippet (migxLoopCollection) to show records of custom-tables at the frontend.", 
            "title": "Home"
        }, 
        {
            "location": "/#migx", 
            "text": "Multi-Items-Grid for MODX-Revolution.", 
            "title": "MIGX"
        }, 
        {
            "location": "/#what-is-migx", 
            "text": "MIGX is a  custom   Template Variable  (TV) input type for aggregating multiple TVs into one TV. This aggregation greatly simplifies the workflow for end users of the manager to add complex data items to the manager. A data item can consist of any number of any other TVs, including text, images, files, checkboxes, etc.  The package is highly customizable and allows the developer to define a custom input window for the MIGX TV. From this input window, items can be added, modified, and reordered.  The package also ships with a snippet ( getImageList ) that facilitates the easy retrieval of the complex data items from the custom MIGX TV input type.", 
            "title": "What is MIGX"
        }, 
        {
            "location": "/#migxdb", 
            "text": "While MIGX stores its items all in one field as a json-string, MIGXdb handles records of custom-tables.\nWith a MIGXdb-TV, you can handle resource-related-records of a custom-table or even child-resources of the currently edited resource.  Its also very easy to create CMPs (Custom Manager Pages) to manage your custom-tables with help of MIGXdb.  There is also a snippet (migxLoopCollection) to show records of custom-tables at the frontend.", 
            "title": "MIGXdb"
        }, 
        {
            "location": "/installation/", 
            "text": "Install from MODX Extras\n\n\nSearch for MIGX in the Package Manager of MODX and install it.\n\n\nManual installation\n\n\nIf you can't access the MODX Extras Repository from your MODX installation, you can install MIGX manually.\n\n\n\n\nDownload the transport package from \nMODX Extras\n\n  (or one of the pre built transport packages in \n_packages\n)\n\n\nUpload the zip file to your MODX installation's \ncore/packages\n folder.\n\n\nIn the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.\n\n\nMIGX should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-from-modx-extras", 
            "text": "Search for MIGX in the Package Manager of MODX and install it.", 
            "title": "Install from MODX Extras"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "If you can't access the MODX Extras Repository from your MODX installation, you can install MIGX manually.   Download the transport package from  MODX Extras \n  (or one of the pre built transport packages in  _packages )  Upload the zip file to your MODX installation's  core/packages  folder.  In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.  MIGX should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.", 
            "title": "Manual installation"
        }, 
        {
            "location": "/tvconfig/", 
            "text": "Input Options\n\n\nConfigs\n\n\nFormtabs\n\n\nColumns", 
            "title": "TV Configuration"
        }, 
        {
            "location": "/tvconfig/#input-options", 
            "text": "Configs  Formtabs  Columns", 
            "title": "Input Options"
        }, 
        {
            "location": "/configcmp/", 
            "text": "Settings\n\n\nName\n\n\n\"Add Item\" Replacement\n\n\nDisable Add Items\n\n\nAdd Items directly\n\n\nForm Caption\n\n\nWindow Title\n\n\nunique MIGX ID\n\n\nmax MIGX records\n\n\nAdd new MIGX records at\n\n\nFormtabs\n\n\nFields\n\n\nThis is the MIGX-grid, where you create the formlayout.\nYou can:\n\n\n\n\nCreate Tabs with 'Add Formtab'\n\n\nAdd Fields to the Tab with 'Add Field'\n\n\nCreate Layout-Rows for Column-Groups with 'Add Layout'\n\n\nAdd Columns to Layout-Rows with 'Add Column'\n\n\n\n\nOptions for Formtabs\n\n\n\n\n\n\n\n\nField\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nCaption\n\n\nThe Caption for the tab\n\n\n\n\n\n\nDisplay above Tabs\n\n\nDisplay its fields above the tab-panel\n\n\n\n\n\n\n\n\nOptions for Fields\n\n\n\n\n\n\n\n\nTab\n\n\nField\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nField\n\n\nFieldname\n\n\nthe name of the Field\n\n\n\n\n\n\n\n\nCaption\n\n\nThe Form - caption of the Field\n\n\n\n\n\n\n\n\nDescription\n\n\nA description for that Field\n\n\n\n\n\n\n\n\nDescription is Code\n\n\nif yes, The code of the description-field is displayed in the form, you can use placeholders and other MODX-tags here.\n\n\n\n\n\n\n\n\nInput TV\n\n\nyou can create a helper-TV, which is used for the input, when you put its name here. Never use a TV as helper-TV, which is/was ever assigned to a template!\n\n\n\n\n\n\n\n\nInput TV type\n\n\nif you set a Input TV type, you don't need a helper-TV. This is used for the input and Input TV is ignored, then. Most Input-TV-types are supported, also custom-TV-types. Find the default TV-types \nhere\n. Use the name without '.class.php'\n\n\n\n\n\n\n\n\nValidation\n\n\nAdd validations for that field. The default update-processor supports only 'required'. Starting with version 2.10 you can have a validate-hook-snippet. \nExample\n\n\n\n\n\n\n\n\nConfigs\n\n\nIf the input TV type is migx or migxdb, put here the name of its MIGX-configuration. For other TV-types you can add here type-specific input-properties as json.\n\n\n\n\n\n\n\n\nRestrictive Condition (MODX tags)\n\n\nThis can be used to hide fields depending on conditions. Use snippets or outputfilters. If it returns an empty string, the field is displayed.\n\n\n\n\n\n\n\n\nDisplay\n\n\nIf 'no' the field isn't displayed at all\n\n\n\n\n\n\nMediasources\n\n\nsource From\n\n\nconfig - uses the mediasources of this config added with 'Add item'\ntv - uses the mediasource of the helper-TV (input TV)\nmigx - if the configuration is for a MIGX-TV, uses the mediasources of that MIGX-TV\n\n\n\n\n\n\n\n\nSources\n\n\nAdd the mediasource-ids here. Example: Context:mgr,Source:3; Context:web,Source:3\n\n\n\n\n\n\nInput Options\n\n\nInput Option Values\n\n\nAdd input-option-values for listbox, checkbox and option-type-TVs. \nBindings\n like @CHUNK, @EVAL, @SELECT can be used here for dynamical created input-options.\n\n\n\n\n\n\n\n\nDefault Value\n\n\nThe default value of that field.\n\n\n\n\n\n\n\n\nOptions for Layouts\n\n\n\n\n\n\n\n\nField\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nCaption\n\n\nOptional Caption for the Layout Row\n\n\n\n\n\n\nStyle\n\n\nAdditional CSS-Style for that Layout Row\n\n\n\n\n\n\n\n\nOptions for Columns\n\n\n\n\n\n\n\n\nField\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nColumn width\n\n\nThe width for that column. default: 100% - If you have for example two columns with same witdh try calc(50% - 10px)\n\n\n\n\n\n\nColumn min-width\n\n\nif you have inputTVtypes with hardcoded width, for example listbox, try to set a min-with for that column\n\n\n\n\n\n\nCaption\n\n\nOptional Caption for that Column\n\n\n\n\n\n\nStyle\n\n\nAdditional CSS-Style for that Column\n\n\n\n\n\n\n\n\nMultiple Formtabs\n\n\nMultiple Formtabs Label\n\n\nMultiple Formtabs Label\n\n\nMultiple Formtabs Optionstext\n\n\nMultiple Formtabs Optionsvalue\n\n\nColumns\n\n\nDefine all the grid-columns here.\nIf this is for a MIGXdb - grid, dont't forget to add the id-field. \nOtherwise MIGX doesn't know, which record to edit. \nThis column can also be hidden, if you don't want to show it in the grid.\n\n\nOptions for Columns\n\n\n\n\n\n\n\n\nTab\n\n\nField\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nColumn\n\n\nHeader\n\n\nThe Caption for that column\n\n\n\n\n\n\n\n\nField\n\n\nthe fieldname of that column\n\n\n\n\n\n\n\n\nColumn width\n\n\nthe proportional with of columns to each other\n\n\n\n\n\n\n\n\nSortable\n\n\nif the column should be sortable\n\n\n\n\n\n\n\n\nShow in Grid\n\n\nif the column shoulc be shown of hidden from grid. In some situations, the column is needed to get its value, but you don't want to show it in the grid.\n\n\n\n\n\n\nRenderer\n\n\nCustom Renderer\n\n\nIf you want to use a custom-renderer, which isn't in the list. Example: ImagePlus.MIGX_Renderer\n\n\n\n\n\n\n\n\nRenderer\n\n\nSelect a renderer for that column. See the next table for Renderer-descriptions.\n\n\n\n\n\n\nCell Editor\n\n\nEditor\n\n\nFor ingrid-editing, select an Editor for this column. \nthis.textEditor - simple Text-input\nthis.listboxEditor - shows a listbox with the input-options of that field\n\n\n\n\n\n\n\n\nRenderers\n\n\n\n\n\n\n\n\nRenderer\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nthis.renderimage\n\n\n\n\n\n\n\n\nthis.renderImageFromHtml\n\n\n\n\n\n\n\n\nthis.renderPlaceholder\n\n\n\n\n\n\n\n\nthis.renderFirst\n\n\n\n\n\n\n\n\nthis.renderLimited\n\n\n\n\n\n\n\n\nthis.renderCrossTick\n\n\n\n\n\n\n\n\nthis.renderClickCrossTick\n\n\n\n\n\n\n\n\nthis.renderSwitchStatusOptions\n\n\n\n\n\n\n\n\nthis.renderPositionSelector\n\n\n\n\n\n\n\n\nthis.renderRowActions\n\n\n\n\n\n\n\n\nthis.renderChunk\n\n\n\n\n\n\n\n\nImagePlus.MIGX_Renderer\n\n\n\n\n\n\n\n\nthis.renderDate\n\n\n\n\n\n\n\n\nthis.renderOptionSelector", 
            "title": "MIGX Configurator CMP"
        }, 
        {
            "location": "/configcmp/#settings", 
            "text": "Name  \"Add Item\" Replacement  Disable Add Items  Add Items directly  Form Caption  Window Title  unique MIGX ID  max MIGX records  Add new MIGX records at", 
            "title": "Settings"
        }, 
        {
            "location": "/configcmp/#formtabs", 
            "text": "Fields  This is the MIGX-grid, where you create the formlayout.\nYou can:   Create Tabs with 'Add Formtab'  Add Fields to the Tab with 'Add Field'  Create Layout-Rows for Column-Groups with 'Add Layout'  Add Columns to Layout-Rows with 'Add Column'   Options for Formtabs     Field  Purpose      Caption  The Caption for the tab    Display above Tabs  Display its fields above the tab-panel     Options for Fields     Tab  Field  Purpose      Field  Fieldname  the name of the Field     Caption  The Form - caption of the Field     Description  A description for that Field     Description is Code  if yes, The code of the description-field is displayed in the form, you can use placeholders and other MODX-tags here.     Input TV  you can create a helper-TV, which is used for the input, when you put its name here. Never use a TV as helper-TV, which is/was ever assigned to a template!     Input TV type  if you set a Input TV type, you don't need a helper-TV. This is used for the input and Input TV is ignored, then. Most Input-TV-types are supported, also custom-TV-types. Find the default TV-types  here . Use the name without '.class.php'     Validation  Add validations for that field. The default update-processor supports only 'required'. Starting with version 2.10 you can have a validate-hook-snippet.  Example     Configs  If the input TV type is migx or migxdb, put here the name of its MIGX-configuration. For other TV-types you can add here type-specific input-properties as json.     Restrictive Condition (MODX tags)  This can be used to hide fields depending on conditions. Use snippets or outputfilters. If it returns an empty string, the field is displayed.     Display  If 'no' the field isn't displayed at all    Mediasources  source From  config - uses the mediasources of this config added with 'Add item' tv - uses the mediasource of the helper-TV (input TV) migx - if the configuration is for a MIGX-TV, uses the mediasources of that MIGX-TV     Sources  Add the mediasource-ids here. Example: Context:mgr,Source:3; Context:web,Source:3    Input Options  Input Option Values  Add input-option-values for listbox, checkbox and option-type-TVs.  Bindings  like @CHUNK, @EVAL, @SELECT can be used here for dynamical created input-options.     Default Value  The default value of that field.     Options for Layouts     Field  Purpose      Caption  Optional Caption for the Layout Row    Style  Additional CSS-Style for that Layout Row     Options for Columns     Field  Purpose      Column width  The width for that column. default: 100% - If you have for example two columns with same witdh try calc(50% - 10px)    Column min-width  if you have inputTVtypes with hardcoded width, for example listbox, try to set a min-with for that column    Caption  Optional Caption for that Column    Style  Additional CSS-Style for that Column     Multiple Formtabs  Multiple Formtabs Label  Multiple Formtabs Label  Multiple Formtabs Optionstext  Multiple Formtabs Optionsvalue", 
            "title": "Formtabs"
        }, 
        {
            "location": "/configcmp/#columns", 
            "text": "Define all the grid-columns here.\nIf this is for a MIGXdb - grid, dont't forget to add the id-field. \nOtherwise MIGX doesn't know, which record to edit. \nThis column can also be hidden, if you don't want to show it in the grid.  Options for Columns     Tab  Field  Purpose      Column  Header  The Caption for that column     Field  the fieldname of that column     Column width  the proportional with of columns to each other     Sortable  if the column should be sortable     Show in Grid  if the column shoulc be shown of hidden from grid. In some situations, the column is needed to get its value, but you don't want to show it in the grid.    Renderer  Custom Renderer  If you want to use a custom-renderer, which isn't in the list. Example: ImagePlus.MIGX_Renderer     Renderer  Select a renderer for that column. See the next table for Renderer-descriptions.    Cell Editor  Editor  For ingrid-editing, select an Editor for this column.  this.textEditor - simple Text-input this.listboxEditor - shows a listbox with the input-options of that field     Renderers     Renderer  Purpose      this.renderimage     this.renderImageFromHtml     this.renderPlaceholder     this.renderFirst     this.renderLimited     this.renderCrossTick     this.renderClickCrossTick     this.renderSwitchStatusOptions     this.renderPositionSelector     this.renderRowActions     this.renderChunk     ImagePlus.MIGX_Renderer     this.renderDate     this.renderOptionSelector", 
            "title": "Columns"
        }, 
        {
            "location": "/donate/", 
            "text": "Support MIGX\n\n\nMIGX\n is and always will be free and open-source, but it still requires many man-hours of development and bug-fixing \nbetween the releases.\n\n\nPlease support the ongoing and past development of \nMIGX\n by making a donation below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThanks!", 
            "title": "Donate"
        }, 
        {
            "location": "/donate/#support-migx", 
            "text": "MIGX  is and always will be free and open-source, but it still requires many man-hours of development and bug-fixing \nbetween the releases.  Please support the ongoing and past development of  MIGX  by making a donation below.         \nThanks!", 
            "title": "Support MIGX"
        }
    ]
}